{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7b702bb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter n: 8\n",
      "8th Fibonacci number is 13\n",
      "Fibonacci can't be computed\n",
      "None\n",
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n",
      "55\n",
      "89\n"
     ]
    }
   ],
   "source": [
    "#Q.1 fibonnaci sequence using def function\n",
    "def fib_num(n):\n",
    "   if n<=0:\n",
    "      print(\"Fibonacci can't be computed\")\n",
    "   elif n==1:\n",
    "      return 0\n",
    "   elif n==2:\n",
    "      return 1\n",
    "   else:\n",
    "      return fib_num(n-1)+fib_num(n-2)\n",
    "n=int(input(\"Enter n: \"))\n",
    "print(\"{}th Fibonacci number is\".format(n),fib_num(n))\n",
    "for i in range (fib_num(n)):\n",
    "    print(fib_num(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d5af9c8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the terms8\n",
      "0 1 1 2 3 5 8 13 "
     ]
    }
   ],
   "source": [
    "#Q.1 Fibonacci sequence\n",
    "a=int(input(\"Enter the terms\"))\n",
    "f=0 #first element of series\n",
    "s=1 #second element of series\n",
    "if a<=0:\n",
    "    print(\"The requested series is\",f)\n",
    "else:\n",
    "    print(f,s,end=\" \")\n",
    "for x in range(2,a):\n",
    "    next=f+s\n",
    "    print(next,end=\" \")\n",
    "    f=s\n",
    "    s=next"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b7d8e683",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the string:Python\n",
      "nohtyP\n"
     ]
    }
   ],
   "source": [
    "#Q.2 send the word to mirror dimension\n",
    "s=input('enter the string:')\n",
    "print(s[ : :-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "65cac717",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the date of the month7\n",
      "do not go outside\n"
     ]
    }
   ],
   "source": [
    "#Q.3 Don't go outside in odd day\n",
    "\n",
    "s=int(input('enter the date of the month'))\n",
    "if (s%2!=0):\n",
    "    print('do not go outside')\n",
    "else:\n",
    "    print('go outside')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca21f8e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
